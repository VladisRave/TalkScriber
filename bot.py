import os
import uuid
import json
import shutil
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
from pydub import AudioSegment
from pydub.utils import which
from VoiceRecorder import VoiceRecorder
from TextSummarizer import TextSummarizer


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

ffmpeg_path = config.get("ffmpeg_path")
telegram_token = config.get("telegram_token")

if not ffmpeg_path or not telegram_token:
    raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ffmpeg_path –∏–ª–∏ telegram_token")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pydub
AudioSegment.converter = which(ffmpeg_path)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=telegram_token)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
recorder = VoiceRecorder()
summarizer = TextSummarizer()

# –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs("./buffer/audio/tmp", exist_ok=True)
os.makedirs("./buffer/audio/wav", exist_ok=True)
os.makedirs("./buffer/transcription", exist_ok=True)

# Telegram –ú–µ–Ω—é
start_menu = ReplyKeyboardMarkup(resize_keyboard=True)
start_menu.add(KeyboardButton("üéôRecord"), KeyboardButton("‚öôÔ∏èHelp"))

main_menu = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main_menu.add(
    KeyboardButton("üìïMarkdown"), KeyboardButton("üìóLaTeX"),
    KeyboardButton("üìòTXT"), KeyboardButton("üìôNote")
)
main_menu.add(KeyboardButton("üéôRecord"), KeyboardButton("üßπClear"))


@dp.message_handler(commands=["start", "help"])
async def handle_start(message: types.Message):
    recorder.clear()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!", reply_markup=start_menu)


@dp.message_handler(lambda message: message.text == "‚öôÔ∏èHelp")
async def handle_help(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –ø–∏—à–∏—Ç–µ @Vladis_Rave. –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ ‚ù§Ô∏è"
    )


@dp.message_handler(lambda message: message.text == "üéôRecord")
async def handle_new_session(message: types.Message):
    recorder.clear()
    await message.reply("–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(content_types=[
    types.ContentType.VOICE,
    types.ContentType.AUDIO,
    types.ContentType.DOCUMENT
])
async def handle_audio_input(message: types.Message):
    recorder.clear()
    file_id = None

    if message.voice:
        file_id = message.voice.file_id
    elif message.audio:
        file_id = message.audio.file_id
    elif message.document:
        file_id = message.document.file_id

    if not file_id:
        await message.answer("‚ÄºÔ∏è–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞üòî")
        return

    file = await bot.get_file(file_id)
    file_id = str(uuid.uuid4())
    input_path = f"./buffer/audio/tmp/{file_id}.ogg"
    wav_path = f"./buffer/audio/wav/{file_id}.wav"

    print(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª, –ø—É—Ç—å: {input_path}")
    await bot.download_file(file.file_path, input_path)

    if not os.path.exists(input_path):
        await message.answer(f"‚ÄºÔ∏è–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {input_path}.")
        return

    try:
        audio = AudioSegment.from_file(input_path)
        audio = audio.set_channels(1).set_frame_rate(16000)
        audio.export(wav_path, format="wav", parameters=["-acodec", "pcm_s16le"])
        os.remove(input_path)
    except Exception as e:
        await message.answer(f"‚ÄºÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return

    await message.answer("–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µü§î")

    if message.voice:
        recorder.transcribe_stream(wav_path)
    else:
        text = recorder.transcribe_wav(wav_path)
        recorder.transcript = [text]

    os.remove(wav_path)
    await message.answer("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç–∞üßë‚Äçüíª", reply_markup=main_menu)


@dp.message_handler(lambda message: message.text == "üßπClear")
async def handle_clear_buffers(message: types.Message):
    for folder in ["./buffer/audio/tmp", "./buffer/audio/wav", "./buffer/transcription"]:
        try:
            shutil.rmtree(folder)
            os.makedirs(folder, exist_ok=True)
        except Exception as e:
            await message.answer(f"‚ÄºÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {folder}: {str(e)}")
            return
    recorder.clear()
    await message.answer("–ë—É—Ñ–µ—Ä—ã –æ—á–∏—â–µ–Ω—ãüßº")


@dp.message_handler(lambda message: message.text in [
    "üìïMarkdown", "üìóLaTeX", "üìòTXT", "üìôNote"
])
async def summarize_text(message: types.Message):
    mode = message.text.lower()
    text = recorder.get_full_transcript()
    if not text:
        await message.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ü´®")
        return
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Å–ø–µ–∫—Ç‚úçÔ∏è")
    summary = summarizer.summarize(text, mode=mode)
    await message.answer(summary)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
